1.基本概念

->简介
mongodb是一个分布式文件存储的NoSQL数据库

->术语对比
MYSQL:database-table-row-column
MONGO:database-collection-document-filed

->三元素
数据库、集合、文档

集合就是关系数据库中的表
文档对应着关系数据库中的行

文档，就是一个对象，由键值对构成，是json的扩展Bson形式
如可以存储如下文档在一个集合中
{'name':'guojing','gender':'男'}
{'name':'huangrong','age':18}
{'book':'shuihuzhuan','heros':'108'}


2.管理mongo

->配置文件
/etc/mongod.conf
默认端口27017

->将可执行文件添加到PATH路径
export PATH=/usr/local/mongodb/bin:$PATH

->启动mongo
sudo service mongod start

->停止mongo
sudo service mongd stop

->连接mongo
mongo

->退出mongo
exit
或ctrl+c

->使用GUI
bin目录下有GUI工具robomongo，类似于navicat


3.数据库操作

->查看当前数据库名称
db

->查看当前数据库状态
db.stats

->查看所有数据库
show dbs

->切换数据库
use 数据库名称
---- 如果数据库不存在，则指向数据库，但不创建，直到插入数据或创建集合时，数据库才被创建
---- 默认的数据库为test，如果没有创建新的数据库，集合将存放在test数据库中

->数据库删除
db.dropDatabse()

4.集合操作

->创建集合
db.createCollection(name,options)
name是要创建的集合的名称
options是一个文档，用于指定集合的配置，是可选的

eg1.
db.createCollection("stu")

eg2.
db.createCollection("stu",{capped:true,size:10})
表示限制集合的大小
capped，默认值为false，即不设置上限，true表示设置上限
size，单位为字节，当capped值为true时，需要指定此参数，表示上限大小，当数据达到上限后，将原来数据覆盖

->查看当前数据库的集合
show collections

->删除当前数据库的某集合
db.集合名称.drop()


5.数据类型
ObjectID:文档ID
String:字符串，最常用，必须是有效的UTF-8
Boolean:存储一个布尔值，true或false
Integer:整数，可以是32位或64位
Double:存储浮点值
Arrays；数组或列表，多个值存储到一个键
Object:用于嵌入式的文档，即一个值为一个文档
Null:存储空值
Timestamp:时间戳
Date:存储当前日期或时间的UNIX时间格式

---- object id
每个文档都有一个属性，为_id,保证每个文档的唯一性
可以自己去设置_id插入文档
如果没有提供，那么MongoDB为每个文档提供了一个独特的_id，类型为objectID
objectID是一个12字节的十六进制数
前4个字节为当前时间戳
接下来3个字节的机器ID
接下来的2个字节中MongoDB的服务进程id
最后3个字节是简单的增量值


6.数据操作

->插入
db.集合名词.insert(document)
---- 插入文档时，如果不指定_id参数，mongodb会为文档分配一个唯一的objectid
eg1
db.stu.insert({name:'gj',gender:1})

eg2
s1={name:'hr',gender:0}
s1._id='20190808'
db.stu.insert(s1)


->简单查询
db.集合名词.find()

->更新
db.集合名词.update(
query
update
{multi:<boolean>}
)

query:查询条件
update:更新操作符
multi:可选，默认是false,即只更新找到的第一条记录,为true标识满足条件的都更新

全文档更新
db.stu.update({name:'hr'},{name:'mnc'})
db.stu.update({name:'hr'},{name:'mnc'},{multi:true})

指定属性更新，通过操作符$set
db.stu.update({name:'hr'},{$set{name:'mnc'}})

->保存
save:如果文档的_id已经存在则修改，如果文档的_id不存在则添加

db.集合名词.save(document)

insert和save都可以插入数据，区别是当_id重复时：
insert: 若新增数据的主键已经存在，则会抛 DuplicateKeyException 异常提示主键重复，不保存当前数据。
save: 若新增数据的主键已经存在，则会对当前已经存在的数据进行修改操作。

->删除
db.集合名词.remove(
<query>,
{justOne:<boolean>}
)
参数query:可选，删除的文档的条件
参数justOne:可选，如果设为true或1，则只删除一条，默认false，表示删除多条

eg.删除所有女学生
db.stu.remove({gender:0})

eg.全部删除
db.stu.remove({})


7.数据查询

->基本查询
db.集合名称.find({query})           查询
db.集合名词.findOne({query})        只返回第一个
db.集合名词.find({query}).pretty()  将结果格式化

->比较运算符
等于 默认是等于判断，没有运算符
小于 $lt
小于等于 $lte
大于 $gt
大于等于 $gte
不等于 $ne

eg.查询年龄等于18的学生
db.stu.find({age:18})

eg.查询年龄大于等于18的学生
db.stu.find({age:{$gte:18}})

->逻辑运算符

逻辑与:默认就是逻辑与的关系
db.stu.find({age:18,gender:1})

逻辑或，使用$or
db.stu.find({$or:[{age:18},{gender:1}]})

->范围运算符
$in
$nin
db.stu.find({age:{$in:[18,28]}})

->正则表达式
使用//或$regex编写正则表达式

eg.查询姓黄的学生
db.stu.find({name:/^黄/})
db.stu.find({name:{regex:{'^黄'}}})

->自定义查询
使用$where后面写一个函数，返回满足条件的数据
db.stu.find($where:function(){return this.age>20})

->limit与skip
db.集合名称.find().limit(NUMBER)
db.集合名称.find().skip(NUMBER)

eg.查询第5到8条的数据
db.stu.find().limit(4).skip(5)

->投影
在查询到的返回结果中，只选择必要的字段，而不是选择一个文档的整个字段
db.stu.find({},{_id:0,name:1,gender:1})
---- 特殊情况：对于_id列默认是显示的，如果不显示必须明确指定_id:0

->排序
sort()
1为升序，-1为降序

eg.根据性别降序，再根据年龄升序
db.集合名称.find().sort({gender:-1,age:1})

->统计个数
db.集合名称.find({query}).count()
或者写成
db.集合名词.count({query})

eg.统计男生的个数
db.stu.find({gender:1}).count()
db.stu.count({gender:1})

->消除重复
db.集合名词.distinct('去重字段',{条件})

eg.查询年龄大于18的性别(去重)
db.stu.distinct('gender',{age:{$gt:18}})


8.聚合aggregate
聚合主要用于计算数据，类似于sql中的sum()、avg()

->语法
db.集合名词.aggregate([{管道:{表达式}}])

管道有：
$group		分组
$match		过滤
$project	修改结构
$sort		排序
$limit		
$skip
$unwind		拆分数组

表达式有：
$sum:计算总和，$sum:1同count表示计数
$avg:计算平均值
$min:获取最小值
$max:获取最大值
$push:在结果文档中插入值到一个数组中
$first:根据资源文档的排序获取第一个文档数据
$last:根据资源文档的排序获取最后一个文档数据

->group管道

group的作用是将集合中的文档分类，可用于统计结果
_id表示分组的依据，使用某个字段的格式为'$字段'

eg.统计男生、女生的总人数
db.stu.aggregate([
{$group:{_id:'$gender',counter:{$sum:1}}}
])

group by null
将集合中所有文档分为一组

eg.求学生总人数、平均年龄
db.stu.aggregate([
{$group:{_id:null,counter:{$sum:1},avgAge:{$avg:'$age'}}}
])

透视数据
eg.统计学生性别及对应的学生姓名
db.stu.aggregate([
{$group:{_id:'$gender',name:{$push:'$name'}}}
])

使用$$ROOT可以将文档内容加入到结果集的数组中，代码如下
db.stu.aggregate([
{$group:{_id:'$gender',name:{$push:'$$ROOT'}}}
])

->match管道
用于过滤数据，只输出符合条件的文档
使用mongodb的标准查询操作

eg.查询年龄大于20的学生
db.stu.aggregate([
{$match:{age:{$gt:20}}}
])

eg.查询年龄大于20的男生、女生个数
db.stu.aggregate([
{$match:{age:{$gt:20}}},
{$group:{_id:'$gender',counter:{$sum:1}}}
])

->project
修改输入文档的结构，如重命名、增加、删除字段、创建计算结果

eg.查询学生的姓名、年龄
db.stu.aggregate([
{$project:{_id:0,name:1,age:1}}
])

eg.查询男生、女生人数，输入人数
db.stu.aggregate([
{$group:{_id:'$gender',counter:{$sum:1}}},
{$project:{_id:0,counter:1}}
])

->sort
将输入文档排序后输入

eg.查询学生信息，按年龄升序
db.stu.aggregate([
{$sort:{age:1}}
])

eg.查询男生、女生人数，按人数降序
db.stu.aggregate([
{$group:{_id:'$gender',counter:{$sum:1}}},
{$sort:{counter:-1}}
])

->limit和skip
限制聚合管道返回的文档数

eg.查询2条学生信息
db.stu.aggregate([
{$limit:2}
])

eg.查询从第3条开始的学生信息
db.stu.aggregate([
{$skip:2}
])

eg.统计男生、女生人数，按人数升序，取第二条数据
db.stu.aggregate([
{$group:{_id:'$gender',counter:{$sum:1}}},
{$sort:{counter:-1}},
{$skip:1},
{$limit:1}
])

->unwind
将文档中某一数组类型的字段拆分成多条

eg.1
构造数据
db.t2.insert({_id:1,item:'t-shirt',size:['S','M','L']})
db.t2.aggregate([
{$unwind,'$size'}
])

eg.2
构造数据
db.t3.insert([
{ "_id" : 1, "item" : "a", "size": [ "S", "M", "L"] },
{ "_id" : 2, "item" : "b", "size" : [ ] },
{ "_id" : 3, "item" : "c", "size": "M" },
{ "_id" : 4, "item" : "d" },
{ "_id" : 5, "item" : "e", "size" : null }
])
使用如下查询后发现空数组、无字段、null的文档都被丢弃了
db.t3.aggregate([{$unwind:'$size'}])
要想这些不被丢弃，加如下字段
db.t3.aggregate([{$unwind:{path:'$sizes',preserveNullAndEmptyArrays:true}}])


9.安全
mongodb采用了角色-用户-数据库的安全管理方式

->常用系统角色如下
root：只在admin数据库中可用，超级账号，超级权限
Read：允许用户读取指定数据库
readWrite：允许用户读写指定数据库

->创建超级管理用户admin
use admin
db.createUser({
user:'admin',
pwd:'123'
roles:[{role:'root',db:'admin'}]
})

->启用安全认证
-->修改配置文件
sudo vim /etc/mongod.conf
security项中authorization修改为enabled
security:
  authorization: enabled
-->重启服务
sudo service mongod restart
-->终端连接
mongo -u admin -p 123 --authenticationDatabase admin

->普通用户管理
使用超级管理员用户登录，然后进入用户管理操作
use test1 //使用test1数据库
show users //查看使用当前数据库的用户
-->创建普通用户
db.createUser({
user：‘t1’,
pwd：‘123’,
roles:[{role:'readWrite',db：‘test1’}]
})
-->终端连接
mongo -u t1 -p 123 --authenticationDatabase test1
-->修改用户，可以修改pwd、roles属性
db.update('t1',{pwd：‘456’})


10.复制（副本集）

->复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性，并可以保证数据的安全性

->复制的功能
数据备份
数据灾难恢复
读写分离
高（24*7）数据可用性
无宕机维护
副本集对应用程序是透明的

->复制的工作原理
复制至少需要两个节点A、B
A是主节点，负责处理客户端请求
其余都是从节点，负责复制主节点上的数据
节点常见的搭配方式为一主一从、一主多从
主节点记录在其上的所有操作，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致

->复制的特点
N个节点的集群
任何节点可作为主节点
所有写入操作都在主节点上
自动故障转移
自动恢复

->设置复制节点
--1>创建数据库目录t1、t2,在Desktop目录演示，其它目录也可以
--2>使用如下格式启动mongod，注意replset的名称是一致的
mongod --bind_ip 192.168.196.128 --port 27017 --db_path ~/Desktop/t1 --replSet rs0
mongod --bind_ip 192.168.196.128 --port 27018 --db_path ~/Desktop/t2 --replSet rs0
--3>连接主服务器，此处设置192.168.196.128:27017是主服务器
mongo --host 192.168.196.128 --port 27017
--4>初始化
rs.initiate()
查看当前状态
rs.stauts()
--5>添加副本集
rs.add('192.168.196.128:27018')
--6>向主服务器中添加数据
use test1
for(i=0;i<10;i++){db.t1.insert({_id:i})}
db.t1.find()
--7>在从服务器中查询
mongo --host 192.168.196.128 --port 27018
rs.slaveOk() //在从服务器上进行读操作，需要设置rs.slaveOk()
db.t1.find()


11.备份与恢复
sudo mongodump -h 192.168.196.128:27017 -d test1 -o ~/Desktop/test1bak
sudo mongorestore -h 192.168.196.128:27017 -d test2 --dir ~/Desktop/test1bak/test1

12.与python交互

->安装python包
sudo pip instal pymongo
或者源码安装
python setup.py

->引入包pymongo
import pymongo

->连接，创建客户端
client = pymongo.MongoClient("localhost",27017)

->获得数据库test1
db = client.test1

->获得集合
stu = db.stu

->添加文档
s1 = {name:‘gj’，age:18}
s1_id = stu.insert_one(s1).inserted_id

->查找一个文档
s2 = stu.find_one()

->查找多个文档
for cur in stu.find():
 print cur
或者
cur = stu.find()
cur.next()
cur.next()
cur.next()

->获取文档个数
num = stu.count()